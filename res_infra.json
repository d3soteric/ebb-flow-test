{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Create infrastructure for the test environment",
    "Parameters" : {
        "EC2KeyParameter" : {
            "Description" : "Enter the SSH key to be used to access the instance",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "SGInboundCIDRParameter" : {
            "Description" : "Enter a CIDR range to allow traffic FROM.  No template validation so will break template if invalid",
            "Type" : "String",
            "Default" : "0.0.0.0/0"
        }
    },
    "Resources" : {
        "CreateVPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "InstanceTenancy" : "default",
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateIGW" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [ { "Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "CreateVPC",
            "Properties" : {
                "CidrBlock" : "10.0.1.0/24",
                "MapPublicIpOnLaunch" : "true",
                "VpcId" : { "Ref" : "CreateVPC" },
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "DependsOn" : ["CreateVPC", "CreateSubnet"],
            "Metadata" : {"Comment" : "Interestingly enough, it seems like the route table was not being deleted until after the VPC was being attempted to be deleted so it was breaking the delete.  By adding the depends on, the resources are now cleaning up properly on delete"},
            "Properties" : {
                "VpcId" : {"Ref" : "CreateVPC"},
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateRoute" : { 
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "CreateRouteTable",
            "Properties" : {
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "CreateIGW"},
                "RouteTableId" : {"Ref" : "CreateRouteTable"}
                }
        },
        "AttachIGW" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "DependsOn" : "CreateVPC",
            "Properties" : {
                "VpcId" : { "Ref" : "CreateVPC" },
                "InternetGatewayId" : { "Ref" : "CreateIGW"}
            }
        },
        "AttachRouteTable" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn" : ["CreateRouteTable", "CreateSubnet"],
            "Properties" : {
                "RouteTableId" : { "Ref" : "CreateRouteTable" },
                "SubnetId" : {"Ref" : "CreateSubnet" }
              }
          },
        "CreateSG" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "DependsOn" : "CreateVPC",
            "Metadata" : {"Comment" : "Kept getting the error that the parameter groupName cannot be used wit hteh parameter subnet.  Well this error was confusing.  Removed parameter groupName, same error. put groupName back.  Changed Ref to fn::GetAtt because suggested on internet, same error.  removed groupName and used fn::GetAtt and it then got the same error again...so finally changed the parameter in the ec2 instance from SecurityGroups to SecurityGroupIds  worked.  Really lacking in the docs on this one"},
            "Properties" : {
                "GroupDescription" : "Basic SG for allowing SSH",
                "SecurityGroupEgress" : [ { "CidrIp" : "0.0.0.0/0", "Description" : "Basic SG for Outbound All", "IpProtocol" : "-1" } ],
                "SecurityGroupIngress" : [ { "CidrIp" : { "Ref" : "SGInboundCIDRParameter" }, "Description" : "Basic SG for Inbound SSH", "IpProtocol" : "tcp" ,"FromPort" : 22, "ToPort" : 22}],
                "VpcId" : {"Ref" : "CreateVPC"},
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
              }
          },
        "CreateEC2" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : ["CreateSG", "CreateSubnet"],
            "Properties" : {
                "ImageId" : "ami-062f7200baf2fa504",
                "InstanceType" : "t2.micro",
                "KeyName" : {"Ref" : "EC2KeyParameter"},
                "SubnetId" : {"Ref" : "CreateSubnet"},
                "SecurityGroupIds" : [{ "Fn::GetAtt" : ["CreateSG", "GroupId"] }],
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
              }
          }
    }
}