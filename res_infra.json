{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Create infrastructure for the test environment",
    "Parameters" : {
        "EC2KeyParameter" : {
            "Description" : "Enter the SSH key to be used to access the instance",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "SSHParameter" : {
            "Description" : "Enter the IP address of the system administrating your EC2 systems",
            "Type" : "String",
            "Default" : "192.168.1.1/32"
        },
        "SGInboundCIDRParameter" : {
            "Description" : "Optionally, enter a CIDR range to allow traffic FROM.  You can specify the sender-receiver IP or you can leave it as 0.0.0.0/0",
            "Type" : "String",
            "Default" : "0.0.0.0/0"
        },
        "SGOutboundCIDRParameter" : {
            "Description" : "Optionally, enter a CIDR range to allow traffic FROM.  You can specify the reflector IP or you can leave it as 0.0.0.0/0",
            "Type" : "String",
            "Default" : "0.0.0.0/0"
        },
        "VPCCIDRParameter" : {
            "Description" : "Optionally, enter a CIDR for the VPC (useful if making multiple VPCs)",
            "Type" : "String",
            "Default" : "10.0.0.0/16"
        },
        "SubnetParameter" : {
            "Description" : "Optionally, enter a CIDR for the Subnet (useful if making multiple VPCs)",
            "Type" : "String",
            "Default" : "10.0.0.0/24"
        }
    },
    "Resources" : {
        "CreateVPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Ref" : "VPCCIDRParameter" },
                "InstanceTenancy" : "default",
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateIGW" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [ { "Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "CreateVPC",
            "Properties" : {
                "CidrBlock" : { "Ref" : "SubnetParameter" },
                "MapPublicIpOnLaunch" : "true",
                "VpcId" : { "Ref" : "CreateVPC" },
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "DependsOn" : ["CreateVPC", "CreateSubnet"],
            "Metadata" : {"Comment" : "Interestingly enough, it seems like the route table was not being deleted until after the VPC was being attempted to be deleted so it was breaking the delete.  By adding the depends on, the resources are now cleaning up properly on delete"},
            "Properties" : {
                "VpcId" : {"Ref" : "CreateVPC"},
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },
        "CreateRoute" : { 
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "CreateRouteTable",
            "Properties" : {
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "CreateIGW"},
                "RouteTableId" : {"Ref" : "CreateRouteTable"}
                }
        },
        "AttachIGW" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "DependsOn" : "CreateVPC",
            "Properties" : {
                "VpcId" : { "Ref" : "CreateVPC" },
                "InternetGatewayId" : { "Ref" : "CreateIGW"}
            }
        },
        "AttachRouteTable" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn" : ["CreateRouteTable", "CreateSubnet"],
            "Properties" : {
                "RouteTableId" : { "Ref" : "CreateRouteTable" },
                "SubnetId" : {"Ref" : "CreateSubnet" }
              }
          },
          "SGReflector" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "DependsOn" : "CreateVPC",
            "Metadata" : {"Comment" : "Kept getting the error that the parameter groupName cannot be used with the parameter subnet. Removed parameter groupName, same error. put groupName back.  Changed Ref to fn::GetAtt because suggested on internet, same error.  removed groupName and used fn::GetAtt and it then got the same error again...so finally changed the parameter in the ec2 instance from SecurityGroups to SecurityGroupIds, then i was able to successfully use the GroupName param."},
            "Properties" : {
                "GroupName" : "NoOutbound_RSVPInbound",
                "GroupDescription" : "This SG allows for no outbound traffic.  It allows only protocol 134, RSVP, inbound and protocol 255 to localhost to overwrite default SG",
                "SecurityGroupEgress" : [
                    {"CidrIp": "127.0.0.1/32", "IpProtocol": "255"}
                ],
                "SecurityGroupIngress" : [ 
                    { "CidrIp" : { "Ref" : "SGInboundCIDRParameter" }, "Description" : "RSVP Inbound", "IpProtocol" : "134"} 
                ],
                "VpcId" : {"Ref" : "CreateVPC"},
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} }, {"Key" : "Name", "Value" : "NoOutbound_RSVPInbound"} ]
              }
          },
        "SGSenderReceiver" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "DependsOn" : "CreateVPC",
            "Metadata" : {"Comment" : "Kept getting the error that the parameter groupName cannot be used with the parameter subnet. Removed parameter groupName, same error. put groupName back.  Changed Ref to fn::GetAtt because suggested on internet, same error.  removed groupName and used fn::GetAtt and it then got the same error again...so finally changed the parameter in the ec2 instance from SecurityGroups to SecurityGroupIds, then i was able to successfully use the GroupName param."},
            "Properties" : {
                "GroupName" : "SSHandRSVPOutbound_SSHInbound",
                "GroupDescription" : "Basic SG for allowing SSH",
                "SecurityGroupEgress" : [ 
                    { "CidrIp" : { "Ref" : "SSHParameter" }, "Description" : "SSH from single host", "IpProtocol" : "tcp" ,"FromPort" : 22, "ToPort" : 22}, 
                    { "CidrIp" : "0.0.0.0/0", "Description" : "yum", "IpProtocol" : "tcp" ,"FromPort" : 80, "ToPort" : 80},
                    { "CidrIp" : "0.0.0.0/0", "Description" : "pip", "IpProtocol" : "tcp" ,"FromPort" : 443, "ToPort" : 443},
                    { "CidrIp" : { "Ref" : "SGOutboundCIDRParameter" }, "Description" : "RSVP Outbound", "IpProtocol" : "134"}
                ],
                "SecurityGroupIngress" : [ 
                    { "CidrIp" : { "Ref" : "SSHParameter" }, "Description" : "SSH from single host", "IpProtocol" : "tcp" ,"FromPort" : 22, "ToPort" : 22}
                ],
                "VpcId" : {"Ref" : "CreateVPC"},
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} }, {"Key" : "Name", "Value" : "SSHandRSVPOutbound_SSHInbound"} ]
              }
          },
        "CreateReflector" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : ["SGReflector", "CreateSubnet"],
            "Properties" : {
                "ImageId" : "ami-062f7200baf2fa504",
                "InstanceType" : "t2.micro",
                "KeyName" : {"Ref" : "EC2KeyParameter"},
                "SubnetId" : {"Ref" : "CreateSubnet"},
                "SecurityGroupIds" : [{ "Fn::GetAtt" : ["SGReflector", "GroupId"] }],
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} }, {"Key" : "Name", "Value" : "reflector"}  ]
              }
          },
        "CreateSenderReceiver" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : ["SGSenderReceiver", "CreateSubnet"],
            "Properties" : {
                "ImageId" : "ami-062f7200baf2fa504",
                "InstanceType" : "t2.micro",
                "KeyName" : {"Ref" : "EC2KeyParameter"},
                "SubnetId" : {"Ref" : "CreateSubnet"},
                "SecurityGroupIds" : [{ "Fn::GetAtt" : ["SGSenderReceiver", "GroupId"] }],
                "UserData" : "IyEvYmluL2Jhc2gKc3VkbyB5dW0gdXBkYXRlIC15CnN1ZG8geXVtIGluc3RhbGwgcHl0aG9uLXBpcCAteQpzdWRvIHBpcCBpbnN0YWxsIC0tcHJlIHNjYXB5W2Jhc2ljXQ==",
                "Tags" : [ {"Key" : "stack", "Value" : { "Ref" : "AWS::StackName"} }, {"Key" : "Name", "Value" : "sender-receiver"}  ]
              }
          }
      }
}